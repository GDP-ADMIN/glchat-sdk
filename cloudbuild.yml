steps:
- id: Generate Google Token
  name: gcr.io/cloud-builders/gcloud
  dir: 'libs/${_MODULE}'
  entrypoint: 'bash'
  args:
    - '-c'
    - |-
      # Exit on errors and unset variables
      set -euo pipefail

      # Config
      SERVICE_ACCOUNT="348856828809@cloudbuild.gserviceaccount.com"
      AUDIENCE="pypi"
      TOKEN_FILE="token.key"
      PYPI_TOKEN_FILE="pypi_token.key"

      # Step 1: Get access token
      echo "Getting access token..."
      gcloud auth print-access-token > "$${TOKEN_FILE}"

      # Step 2: Generate ID token
      echo "Generating ID token..."
      ID_TOKEN=$(gcloud auth print-identity-token --audiences pypi --include-email)

      # Step 3: Exchange ID token for PyPI token
      echo "Requesting PyPI OIDC token..."
      PYPI_RESP=$(curl -s -X POST https://pypi.org/_/oidc/mint-token \
        -H "Content-Type: application/json" \
        -d "{\"token\": \"$${ID_TOKEN}\"}")

      # Extract PyPI token manually
      PYPI_TOKEN=$(echo "$${PYPI_RESP}" | sed -n 's/.*"token"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
      echo "$${PYPI_TOKEN}"
      echo "$${ID_TOKEN}"
      echo "$${PYPI_RESP}"

      # Save to file
      echo "$${PYPI_TOKEN}" > "$${PYPI_TOKEN_FILE}"

      echo "PyPI token written to $${PYPI_TOKEN_FILE}"
      exit 1

- id: Test & Build
  name: 'gcr.io/cloud-builders/docker'
  args:
    - "compose"
    - "--file=docker-compose.gcb.yml"
    - "run"
    - "--rm"
    - "builder"
  env:
    - 'MODULE=${_MODULE}'
    - 'VERSION=${_VERSION}'
  secretEnv:
    - 'GH_TOKEN'
  waitFor: ['-']

- id: Upload Packages
  name: 'asia.gcr.io/gdp-labs/gl-base/poetry:1.8.2-py${_VERSION}.0'
  entrypoint: '/bin/bash'
  dir: 'libs/${_MODULE}'
  args:
    - '-c'
    - |-
      if [ -n "${TAG_NAME}" ]; then
        # publish to artifact registry
        poetry config http-basic.gen-ai-publication oauth2accesstoken "$(cat token.key)"
        poetry publish --repository gen-ai-publication --skip-existing

        # publish to pypi
        poetry publish --skip-existing
      else
        echo "No release tag detected. Skipping binary upload."
      fi
  env:
    - 'POETRY_HTTP_BASIC_PYPI_PASSWORD=__token__'
  secretEnv:
    - 'POETRY_HTTP_BASIC_PYPI_PASSWORD'

- id: Run SCA
  name: 'gcr.io/$PROJECT_ID/secops'
  dir: 'libs/${_MODULE}'
  script: |
    #!/bin/bash
    set -xe

    if [ "${VERSION}" != "3.12" ]; then
      echo "Skipping SCA step because Python version is not 3.12 (current value: ${VERSION})."
      exit 0
    fi

    export WORKSPACE=$(pwd)
    bash /opt/sq.sh
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - 'CI_PR_NUMBER=${_PR_NUMBER}'
    - 'CI_BRANCH=${BRANCH_NAME}'
    - 'CI_BASE_BRANCH=${_BASE_BRANCH}'
    - 'VERSION=${_VERSION}'
  secretEnv:
    - 'SCA_TOKEN'

timeout: 30m
options:
  env:
    - 'DOCKER_BUILDKIT=1'
    - 'COMPOSE_DOCKER_CLI_BUILD=1'
    - 'XDG_CACHE_HOME=.cache'
    - 'SONAR_USER_HOME=.cache'

substitutions:
  _PROJECT: gen-ai-external

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/INFRA_GL_GITHUB_TOKEN/versions/latest
    env: 'GH_TOKEN'
  - versionName: "projects/$PROJECT_ID/secrets/INFRA_GL_SONARQUBE_TOKEN/versions/latest"
    env: 'SCA_TOKEN'
  - versionName: "projects/$PROJECT_ID/secrets/GLX_SRE_PYPI_API_TOKEN/versions/latest"
    env: 'POETRY_HTTP_BASIC_PYPI_PASSWORD'

tags: ['gen-ai-external', 'push']
